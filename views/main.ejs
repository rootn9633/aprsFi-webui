<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css" />
  <script src="http://d3js.org/d3.v3.min.js" type="text/javascript"></script>
  <script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"></script>
  <script src='https://api.tiles.mapbox.com/mapbox.js/v1.6.4/mapbox.js'></script>
  <link href='https://api.tiles.mapbox.com/mapbox.js/v1.6.4/mapbox.css' rel='stylesheet' />
  <style>
    html,
    body {
      height: 100%;
      width: 100%;
      font-family: 'Roboto', sans-serif;
    }

    body {
      margin: 0;
    }

    #map {
      width: 100%;
      height: 100%;
    }

    svg {
      position: relative;
    }

    path {
      fill: yellow;
      stroke-width: 2px;
      stroke: red;
      stroke-opacity: 1;
    }
  </style>

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>

  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">

  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-122823873-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-122823873-1');
  </script>


</head>

<body>
  <nav class="navbar navbar-light bg-light">
    <a class="navbar-brand">AirBox Data</a>
  </nav>

  <div id="demo"></div>
  <div id="map"></div>
  <script type="text/javascript">
    var mapboxTiles = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=<%= token %>', {
      attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Terms &amp; Feedback</a>',
      id: 'mapbox.streets'
    });
    var map = L.map('map')
      .addLayer(mapboxTiles)
      .setView([25.0251641, 121.3699326], 14);
    var svg = d3.select(map.getPanes().overlayPane).append("svg");
    var g = svg.append("g").attr("class", "leaflet-zoom-hide");

    //read in the GeoJSON
    d3.json("/geoData", function (collection) {
      let progress = 0;

      var featuresdata = collection.features.filter(function (d) {
        return d.properties.id == "route1"
      })
      // stream transform. transforms geometry before passing it to listener.
      var transform = d3.geo.transform({
        point: projectPoint
      });
      // translates GeoJSON to SVG path codes.
      var d3path = d3.geo.path().projection(transform);

      let ptFeatures = g.selectAll("circle")
        .data(featuresdata.slice(0, 20))
        .enter()
        .append("circle")
        .attr("r", 6)
        .attr("class", "waypoints")
        .style("fill", d => `rgba(255, 0, 0, ${0.5*Math.random()})` );
      // when the user zooms in or out you need to reset the view
      map.on("viewreset", reset);
      // this puts stuff on the map! 
      setInterval(dot, 10);
      reset();
      // Reposition the SVG to cover the features.
      function reset() {
        var bounds = d3path.bounds(collection),
          topLeft = bounds[0],
          bottomRight = bounds[1];
        ptFeatures.attr("transform",
          function (d) {
            return "translate(" +
              applyLatLngToLayer(d).x + "," +
              applyLatLngToLayer(d).y + ")";
          });
        // Setting the size and location of the overall SVG container
        svg.attr("width", bottomRight[0] - topLeft[0] + 120)
          .attr("height", bottomRight[1] - topLeft[1] + 120)
          .style("left", topLeft[0] - 50 + "px")
          .style("top", topLeft[1] - 50 + "px");
        g.attr("transform", "translate(" + (-topLeft[0] + 50) + "," + (-topLeft[1] + 50) + ")");
      } // end reset

      function dot() {
        ptFeatures = g.selectAll("circle")
          .data(featuresdata.slice(0, progress++))
        ptFeatures.exit().remove()
        ptFeatures
          .enter()
          .append("circle")
          .attr("r", 6)
          .attr("class", "waypoints")
          .style("fill", d => `rgba(255, 0, 0, ${0.5 * Math.random()})`);
        if(progress >= featuresdata.length-1) progress = 0
        reset();
      }
      // Use Leaflet to implement a D3 geometric transformation.
      // the latLngToLayerPoint is a Leaflet conversion method:
      //Returns the map layer point that corresponds to the given geographical
      // coordinates (useful for placing overlays on the map).
      function projectPoint(x, y) {
        var point = map.latLngToLayerPoint(new L.LatLng(y, x));
        this.stream.point(point.x, point.y);
      } //end projectPoint
    });
    function applyLatLngToLayer(d) {
      var y = d.geometry.coordinates[1]
      var x = d.geometry.coordinates[0]
      return map.latLngToLayerPoint(new L.LatLng(y, x))
    }
  </script>
</body>

</html>